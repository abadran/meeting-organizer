#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Meeting Organizer")]
public partial class MeetingOrganizer : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertEvent(Event instance);
  partial void UpdateEvent(Event instance);
  partial void DeleteEvent(Event instance);
  partial void InsertEventTimeSlotRelation(EventTimeSlotRelation instance);
  partial void UpdateEventTimeSlotRelation(EventTimeSlotRelation instance);
  partial void DeleteEventTimeSlotRelation(EventTimeSlotRelation instance);
  partial void InsertTimeSlot(TimeSlot instance);
  partial void UpdateTimeSlot(TimeSlot instance);
  partial void DeleteTimeSlot(TimeSlot instance);
  partial void InsertUser(User instance);
  partial void UpdateUser(User instance);
  partial void DeleteUser(User instance);
  #endregion
	
	public MeetingOrganizer(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public MeetingOrganizer(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public MeetingOrganizer(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public MeetingOrganizer(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Event> Event
	{
		get
		{
			return this.GetTable<Event>();
		}
	}
	
	public System.Data.Linq.Table<EventTimeSlotRelation> EventTimeSlotRelation
	{
		get
		{
			return this.GetTable<EventTimeSlotRelation>();
		}
	}
	
	public System.Data.Linq.Table<TimeSlot> TimeSlot
	{
		get
		{
			return this.GetTable<TimeSlot>();
		}
	}
	
	public System.Data.Linq.Table<User> User
	{
		get
		{
			return this.GetTable<User>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute()]
public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _CreatorId;
	
	private System.Nullable<int> _Invitee;
	
	private string _Title;
	
	private string _Subject;
	
	private string _EndTime;
	
	private string _StartTime;
	
	private EntityRef<User> _User;
	
	private EntitySet<EventTimeSlotRelation> _EventTimeSlotRelation;
	
	private EntityRef<User> _InviteeUser;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCreatorIdChanging(int value);
    partial void OnCreatorIdChanged();
    partial void OnInviteeChanging(System.Nullable<int> value);
    partial void OnInviteeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnEndTimeChanging(string value);
    partial void OnEndTimeChanged();
    partial void OnStartTimeChanging(string value);
    partial void OnStartTimeChanged();
    #endregion
	
	public Event()
	{
		this._User = default(EntityRef<User>);
		this._EventTimeSlotRelation = new EntitySet<EventTimeSlotRelation>(new Action<EventTimeSlotRelation>(this.attach_EventTimeSlotRelation), new Action<EventTimeSlotRelation>(this.detach_EventTimeSlotRelation));
		this._InviteeUser = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="creatorId", Storage="_CreatorId", DbType="Int NOT NULL")]
	public int CreatorId
	{
		get
		{
			return this._CreatorId;
		}
		set
		{
			if ((this._CreatorId != value))
			{
				this.OnCreatorIdChanging(value);
				this.SendPropertyChanging();
				this._CreatorId = value;
				this.SendPropertyChanged("CreatorId");
				this.OnCreatorIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="invitee", Storage="_Invitee", DbType="Int")]
	public System.Nullable<int> Invitee
	{
		get
		{
			return this._Invitee;
		}
		set
		{
			if ((this._Invitee != value))
			{
				this.OnInviteeChanging(value);
				this.SendPropertyChanging();
				this._Invitee = value;
				this.SendPropertyChanged("Invitee");
				this.OnInviteeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="title", Storage="_Title", DbType="NVarChar(2000)")]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="subject", Storage="_Subject", DbType="NVarChar(4000)")]
	public string Subject
	{
		get
		{
			return this._Subject;
		}
		set
		{
			if ((this._Subject != value))
			{
				this.OnSubjectChanging(value);
				this.SendPropertyChanging();
				this._Subject = value;
				this.SendPropertyChanged("Subject");
				this.OnSubjectChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="endTime", Storage="_EndTime", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string EndTime
	{
		get
		{
			return this._EndTime;
		}
		set
		{
			if ((this._EndTime != value))
			{
				this.OnEndTimeChanging(value);
				this.SendPropertyChanging();
				this._EndTime = value;
				this.SendPropertyChanged("EndTime");
				this.OnEndTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="startTime", Storage="_StartTime", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string StartTime
	{
		get
		{
			return this._StartTime;
		}
		set
		{
			if ((this._StartTime != value))
			{
				this.OnStartTimeChanging(value);
				this.SendPropertyChanging();
				this._StartTime = value;
				this.SendPropertyChanged("StartTime");
				this.OnStartTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Creator ID", Storage="_User", ThisKey="CreatorId", OtherKey="Id", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Event.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Event.Add(this);
					this._CreatorId = value.Id;
				}
				else
				{
					this._CreatorId = default(int);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event ID", Storage="_EventTimeSlotRelation", ThisKey="Id", OtherKey="EventId", DeleteRule="NO ACTION")]
	public EntitySet<EventTimeSlotRelation> EventTimeSlotRelation
	{
		get
		{
			return this._EventTimeSlotRelation;
		}
		set
		{
			this._EventTimeSlotRelation.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invitee ID", Storage="_InviteeUser", ThisKey="Invitee", OtherKey="Id", IsForeignKey=true)]
	public User InviteeUser
	{
		get
		{
			return this._InviteeUser.Entity;
		}
		set
		{
			User previousValue = this._InviteeUser.Entity;
			if (((previousValue != value) 
						|| (this._InviteeUser.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._InviteeUser.Entity = null;
					previousValue.InviteeID.Remove(this);
				}
				this._InviteeUser.Entity = value;
				if ((value != null))
				{
					value.InviteeID.Add(this);
					this._Invitee = value.Id;
				}
				else
				{
					this._Invitee = default(Nullable<int>);
				}
				this.SendPropertyChanged("InviteeUser");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_EventTimeSlotRelation(EventTimeSlotRelation entity)
	{
		this.SendPropertyChanging();
		entity.Event = this;
	}
	
	private void detach_EventTimeSlotRelation(EventTimeSlotRelation entity)
	{
		this.SendPropertyChanging();
		entity.Event = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute()]
public partial class EventTimeSlotRelation : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _EventId;
	
	private int _TimeSlotId;
	
	private EntityRef<Event> _Event;
	
	private EntityRef<TimeSlot> _TimeSlot;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIdChanging(int value);
    partial void OnEventIdChanged();
    partial void OnTimeSlotIdChanging(int value);
    partial void OnTimeSlotIdChanged();
    #endregion
	
	public EventTimeSlotRelation()
	{
		this._Event = default(EntityRef<Event>);
		this._TimeSlot = default(EntityRef<TimeSlot>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="eventId", Storage="_EventId", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int EventId
	{
		get
		{
			return this._EventId;
		}
		set
		{
			if ((this._EventId != value))
			{
				this.OnEventIdChanging(value);
				this.SendPropertyChanging();
				this._EventId = value;
				this.SendPropertyChanged("EventId");
				this.OnEventIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="timeSlotId", Storage="_TimeSlotId", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int TimeSlotId
	{
		get
		{
			return this._TimeSlotId;
		}
		set
		{
			if ((this._TimeSlotId != value))
			{
				this.OnTimeSlotIdChanging(value);
				this.SendPropertyChanging();
				this._TimeSlotId = value;
				this.SendPropertyChanged("TimeSlotId");
				this.OnTimeSlotIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event ID", Storage="_Event", ThisKey="EventId", OtherKey="Id", IsForeignKey=true)]
	public Event Event
	{
		get
		{
			return this._Event.Entity;
		}
		set
		{
			Event previousValue = this._Event.Entity;
			if (((previousValue != value) 
						|| (this._Event.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Event.Entity = null;
					previousValue.EventTimeSlotRelation.Remove(this);
				}
				this._Event.Entity = value;
				if ((value != null))
				{
					value.EventTimeSlotRelation.Add(this);
					this._EventId = value.Id;
				}
				else
				{
					this._EventId = default(int);
				}
				this.SendPropertyChanged("Event");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Time slot ID", Storage="_TimeSlot", ThisKey="TimeSlotId", OtherKey="Id", IsForeignKey=true)]
	public TimeSlot TimeSlot
	{
		get
		{
			return this._TimeSlot.Entity;
		}
		set
		{
			TimeSlot previousValue = this._TimeSlot.Entity;
			if (((previousValue != value) 
						|| (this._TimeSlot.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._TimeSlot.Entity = null;
					previousValue.EventTimeSlotRelation.Remove(this);
				}
				this._TimeSlot.Entity = value;
				if ((value != null))
				{
					value.EventTimeSlotRelation.Add(this);
					this._TimeSlotId = value.Id;
				}
				else
				{
					this._TimeSlotId = default(int);
				}
				this.SendPropertyChanged("TimeSlot");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute()]
public partial class TimeSlot : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private System.DateTime _Start;
	
	private System.DateTime _End;
	
	private EntitySet<EventTimeSlotRelation> _EventTimeSlotRelation;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStartChanging(System.DateTime value);
    partial void OnStartChanged();
    partial void OnEndChanging(System.DateTime value);
    partial void OnEndChanged();
    #endregion
	
	public TimeSlot()
	{
		this._EventTimeSlotRelation = new EntitySet<EventTimeSlotRelation>(new Action<EventTimeSlotRelation>(this.attach_EventTimeSlotRelation), new Action<EventTimeSlotRelation>(this.detach_EventTimeSlotRelation));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id", Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="start", Storage="_Start", DbType="DateTime NOT NULL")]
	public System.DateTime Start
	{
		get
		{
			return this._Start;
		}
		set
		{
			if ((this._Start != value))
			{
				this.OnStartChanging(value);
				this.SendPropertyChanging();
				this._Start = value;
				this.SendPropertyChanged("Start");
				this.OnStartChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="end", Storage="_End", DbType="DateTime NOT NULL")]
	public System.DateTime End
	{
		get
		{
			return this._End;
		}
		set
		{
			if ((this._End != value))
			{
				this.OnEndChanging(value);
				this.SendPropertyChanging();
				this._End = value;
				this.SendPropertyChanged("End");
				this.OnEndChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Time slot ID", Storage="_EventTimeSlotRelation", ThisKey="Id", OtherKey="TimeSlotId", DeleteRule="NO ACTION")]
	public EntitySet<EventTimeSlotRelation> EventTimeSlotRelation
	{
		get
		{
			return this._EventTimeSlotRelation;
		}
		set
		{
			this._EventTimeSlotRelation.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_EventTimeSlotRelation(EventTimeSlotRelation entity)
	{
		this.SendPropertyChanging();
		entity.TimeSlot = this;
	}
	
	private void detach_EventTimeSlotRelation(EventTimeSlotRelation entity)
	{
		this.SendPropertyChanging();
		entity.TimeSlot = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute()]
public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Name;
	
	private string _Login;
	
	private string _Password;
	
	private EntitySet<Event> _Event;
	
	private EntitySet<Event> _InviteeID;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
	
	public User()
	{
		this._Event = new EntitySet<Event>(new Action<Event>(this.attach_Event), new Action<Event>(this.detach_Event));
		this._InviteeID = new EntitySet<Event>(new Action<Event>(this.attach_InviteeID), new Action<Event>(this.detach_InviteeID));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="name", Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="login", Storage="_Login", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Login
	{
		get
		{
			return this._Login;
		}
		set
		{
			if ((this._Login != value))
			{
				this.OnLoginChanging(value);
				this.SendPropertyChanging();
				this._Login = value;
				this.SendPropertyChanged("Login");
				this.OnLoginChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="password", Storage="_Password", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Creator ID", Storage="_Event", ThisKey="Id", OtherKey="CreatorId", DeleteRule="NO ACTION")]
	public EntitySet<Event> Event
	{
		get
		{
			return this._Event;
		}
		set
		{
			this._Event.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invitee ID", Storage="_InviteeID", ThisKey="Id", OtherKey="Invitee", DeleteRule="NO ACTION")]
	public EntitySet<Event> InviteeID
	{
		get
		{
			return this._InviteeID;
		}
		set
		{
			this._InviteeID.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Event(Event entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Event(Event entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_InviteeID(Event entity)
	{
		this.SendPropertyChanging();
		entity.InviteeUser = this;
	}
	
	private void detach_InviteeID(Event entity)
	{
		this.SendPropertyChanging();
		entity.InviteeUser = null;
	}
}
#pragma warning restore 1591
