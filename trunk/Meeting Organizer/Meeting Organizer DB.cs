#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Meeting Organizer")]
public partial class MeetingOrganizer : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertAppointments(Appointments instance);
  partial void UpdateAppointments(Appointments instance);
  partial void DeleteAppointments(Appointments instance);
  partial void InsertUsers(Users instance);
  partial void UpdateUsers(Users instance);
  partial void DeleteUsers(Users instance);
  #endregion
	
	public MeetingOrganizer(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public MeetingOrganizer(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public MeetingOrganizer(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public MeetingOrganizer(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Appointments> Appointments
	{
		get
		{
			return this.GetTable<Appointments>();
		}
	}
	
	public System.Data.Linq.Table<Users> Users
	{
		get
		{
			return this.GetTable<Users>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute()]
public partial class Appointments : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _CreatorId;
	
	private System.Nullable<int> _Invitee;
	
	private System.Nullable<System.DateTime> _Time;
	
	private string _Title;
	
	private string _Subject;
	
	private EntityRef<Users> _Users;
	
	private EntityRef<Users> _InviteeUsers;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCreatorIdChanging(int value);
    partial void OnCreatorIdChanged();
    partial void OnInviteeChanging(System.Nullable<int> value);
    partial void OnInviteeChanged();
    partial void OnTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    #endregion
	
	public Appointments()
	{
		this._Users = default(EntityRef<Users>);
		this._InviteeUsers = default(EntityRef<Users>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="creatorId", Storage="_CreatorId", DbType="Int NOT NULL")]
	public int CreatorId
	{
		get
		{
			return this._CreatorId;
		}
		set
		{
			if ((this._CreatorId != value))
			{
				this.OnCreatorIdChanging(value);
				this.SendPropertyChanging();
				this._CreatorId = value;
				this.SendPropertyChanged("CreatorId");
				this.OnCreatorIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="invitee", Storage="_Invitee", DbType="Int")]
	public System.Nullable<int> Invitee
	{
		get
		{
			return this._Invitee;
		}
		set
		{
			if ((this._Invitee != value))
			{
				this.OnInviteeChanging(value);
				this.SendPropertyChanging();
				this._Invitee = value;
				this.SendPropertyChanged("Invitee");
				this.OnInviteeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="time", Storage="_Time", DbType="DateTime")]
	public System.Nullable<System.DateTime> Time
	{
		get
		{
			return this._Time;
		}
		set
		{
			if ((this._Time != value))
			{
				this.OnTimeChanging(value);
				this.SendPropertyChanging();
				this._Time = value;
				this.SendPropertyChanged("Time");
				this.OnTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="title", Storage="_Title", DbType="NVarChar(2000)")]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="subject", Storage="_Subject", DbType="NVarChar(4000)")]
	public string Subject
	{
		get
		{
			return this._Subject;
		}
		set
		{
			if ((this._Subject != value))
			{
				this.OnSubjectChanging(value);
				this.SendPropertyChanging();
				this._Subject = value;
				this.SendPropertyChanged("Subject");
				this.OnSubjectChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Creator ID", Storage="_Users", ThisKey="CreatorId", OtherKey="Id", IsForeignKey=true)]
	public Users Users
	{
		get
		{
			return this._Users.Entity;
		}
		set
		{
			Users previousValue = this._Users.Entity;
			if (((previousValue != value) 
						|| (this._Users.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Users.Entity = null;
					previousValue.Appointments.Remove(this);
				}
				this._Users.Entity = value;
				if ((value != null))
				{
					value.Appointments.Add(this);
					this._CreatorId = value.Id;
				}
				else
				{
					this._CreatorId = default(int);
				}
				this.SendPropertyChanged("Users");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invitee ID", Storage="_InviteeUsers", ThisKey="Invitee", OtherKey="Id", IsForeignKey=true)]
	public Users InviteeUsers
	{
		get
		{
			return this._InviteeUsers.Entity;
		}
		set
		{
			Users previousValue = this._InviteeUsers.Entity;
			if (((previousValue != value) 
						|| (this._InviteeUsers.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._InviteeUsers.Entity = null;
					previousValue.InviteeID.Remove(this);
				}
				this._InviteeUsers.Entity = value;
				if ((value != null))
				{
					value.InviteeID.Add(this);
					this._Invitee = value.Id;
				}
				else
				{
					this._Invitee = default(Nullable<int>);
				}
				this.SendPropertyChanged("InviteeUsers");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute()]
public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Name;
	
	private string _Login;
	
	private string _Password;
	
	private EntitySet<Appointments> _Appointments;
	
	private EntitySet<Appointments> _InviteeID;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
	
	public Users()
	{
		this._Appointments = new EntitySet<Appointments>(new Action<Appointments>(this.attach_Appointments), new Action<Appointments>(this.detach_Appointments));
		this._InviteeID = new EntitySet<Appointments>(new Action<Appointments>(this.attach_InviteeID), new Action<Appointments>(this.detach_InviteeID));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="name", Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="login", Storage="_Login", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Login
	{
		get
		{
			return this._Login;
		}
		set
		{
			if ((this._Login != value))
			{
				this.OnLoginChanging(value);
				this.SendPropertyChanging();
				this._Login = value;
				this.SendPropertyChanged("Login");
				this.OnLoginChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="password", Storage="_Password", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Creator ID", Storage="_Appointments", ThisKey="Id", OtherKey="CreatorId", DeleteRule="NO ACTION")]
	public EntitySet<Appointments> Appointments
	{
		get
		{
			return this._Appointments;
		}
		set
		{
			this._Appointments.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invitee ID", Storage="_InviteeID", ThisKey="Id", OtherKey="Invitee", DeleteRule="NO ACTION")]
	public EntitySet<Appointments> InviteeID
	{
		get
		{
			return this._InviteeID;
		}
		set
		{
			this._InviteeID.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Appointments(Appointments entity)
	{
		this.SendPropertyChanging();
		entity.Users = this;
	}
	
	private void detach_Appointments(Appointments entity)
	{
		this.SendPropertyChanging();
		entity.Users = null;
	}
	
	private void attach_InviteeID(Appointments entity)
	{
		this.SendPropertyChanging();
		entity.InviteeUsers = this;
	}
	
	private void detach_InviteeID(Appointments entity)
	{
		this.SendPropertyChanging();
		entity.InviteeUsers = null;
	}
}
#pragma warning restore 1591
