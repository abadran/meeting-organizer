#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Meeting_Organizer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Meeting Organizer")]
	public partial class MeetingOrganizer : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEvents(Events instance);
    partial void UpdateEvents(Events instance);
    partial void DeleteEvents(Events instance);
    partial void InsertEventsTimeSlotRelations(EventsTimeSlotRelations instance);
    partial void UpdateEventsTimeSlotRelations(EventsTimeSlotRelations instance);
    partial void DeleteEventsTimeSlotRelations(EventsTimeSlotRelations instance);
    partial void InsertTimeSlots(TimeSlots instance);
    partial void UpdateTimeSlots(TimeSlots instance);
    partial void DeleteTimeSlots(TimeSlots instance);
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    #endregion
		
		public MeetingOrganizer(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MeetingOrganizer(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MeetingOrganizer(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MeetingOrganizer(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Events> Events
		{
			get
			{
				return this.GetTable<Events>();
			}
		}
		
		public System.Data.Linq.Table<EventsTimeSlotRelations> EventsTimeSlotRelations
		{
			get
			{
				return this.GetTable<EventsTimeSlotRelations>();
			}
		}
		
		public System.Data.Linq.Table<TimeSlots> TimeSlots
		{
			get
			{
				return this.GetTable<TimeSlots>();
			}
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Events : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CreatorId;
		
		private System.Nullable<int> _Invitee;
		
		private string _Title;
		
		private string _Subject;
		
		private string _EndTime;
		
		private string _StartTime;
		
		private EntitySet<EventsTimeSlotRelations> _EventsTimeSlotRelations;
		
		private EntityRef<Users> _Users;
		
		private EntityRef<Users> _InviteeUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCreatorIdChanging(int value);
    partial void OnCreatorIdChanged();
    partial void OnInviteeChanging(System.Nullable<int> value);
    partial void OnInviteeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnEndTimeChanging(string value);
    partial void OnEndTimeChanged();
    partial void OnStartTimeChanging(string value);
    partial void OnStartTimeChanged();
    #endregion
		
		public Events()
		{
			this._EventsTimeSlotRelations = new EntitySet<EventsTimeSlotRelations>(new Action<EventsTimeSlotRelations>(this.attach_EventsTimeSlotRelations), new Action<EventsTimeSlotRelations>(this.detach_EventsTimeSlotRelations));
			this._Users = default(EntityRef<Users>);
			this._InviteeUsers = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="creatorId", Storage="_CreatorId", DbType="Int NOT NULL")]
		public int CreatorId
		{
			get
			{
				return this._CreatorId;
			}
			set
			{
				if ((this._CreatorId != value))
				{
					this.OnCreatorIdChanging(value);
					this.SendPropertyChanging();
					this._CreatorId = value;
					this.SendPropertyChanged("CreatorId");
					this.OnCreatorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="invitee", Storage="_Invitee", DbType="Int")]
		public System.Nullable<int> Invitee
		{
			get
			{
				return this._Invitee;
			}
			set
			{
				if ((this._Invitee != value))
				{
					this.OnInviteeChanging(value);
					this.SendPropertyChanging();
					this._Invitee = value;
					this.SendPropertyChanged("Invitee");
					this.OnInviteeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="title", Storage="_Title", DbType="NVarChar(2000)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="subject", Storage="_Subject", DbType="NVarChar(4000)")]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="endTime", Storage="_EndTime", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="startTime", Storage="_StartTime", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Events_EventsTimeSlotRelations", Storage="_EventsTimeSlotRelations", ThisKey="Id", OtherKey="EventId")]
		public EntitySet<EventsTimeSlotRelations> EventsTimeSlotRelations
		{
			get
			{
				return this._EventsTimeSlotRelations;
			}
			set
			{
				this._EventsTimeSlotRelations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Events", Storage="_Users", ThisKey="CreatorId", OtherKey="Id", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._CreatorId = value.Id;
					}
					else
					{
						this._CreatorId = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Events1", Storage="_InviteeUsers", ThisKey="Invitee", OtherKey="Id", IsForeignKey=true)]
		public Users InviteeUsers
		{
			get
			{
				return this._InviteeUsers.Entity;
			}
			set
			{
				Users previousValue = this._InviteeUsers.Entity;
				if (((previousValue != value) 
							|| (this._InviteeUsers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InviteeUsers.Entity = null;
						previousValue.InviteeID.Remove(this);
					}
					this._InviteeUsers.Entity = value;
					if ((value != null))
					{
						value.InviteeID.Add(this);
						this._Invitee = value.Id;
					}
					else
					{
						this._Invitee = default(Nullable<int>);
					}
					this.SendPropertyChanged("InviteeUsers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EventsTimeSlotRelations(EventsTimeSlotRelations entity)
		{
			this.SendPropertyChanging();
			entity.Events = this;
		}
		
		private void detach_EventsTimeSlotRelations(EventsTimeSlotRelations entity)
		{
			this.SendPropertyChanging();
			entity.Events = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class EventsTimeSlotRelations : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventId;
		
		private int _TimeSlotId;
		
		private EntityRef<Events> _Events;
		
		private EntityRef<TimeSlots> _TimeSlots;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIdChanging(int value);
    partial void OnEventIdChanged();
    partial void OnTimeSlotIdChanging(int value);
    partial void OnTimeSlotIdChanged();
    #endregion
		
		public EventsTimeSlotRelations()
		{
			this._Events = default(EntityRef<Events>);
			this._TimeSlots = default(EntityRef<TimeSlots>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="eventId", Storage="_EventId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="timeSlotId", Storage="_TimeSlotId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TimeSlotId
		{
			get
			{
				return this._TimeSlotId;
			}
			set
			{
				if ((this._TimeSlotId != value))
				{
					this.OnTimeSlotIdChanging(value);
					this.SendPropertyChanging();
					this._TimeSlotId = value;
					this.SendPropertyChanged("TimeSlotId");
					this.OnTimeSlotIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Events_EventsTimeSlotRelations", Storage="_Events", ThisKey="EventId", OtherKey="Id", IsForeignKey=true)]
		public Events Events
		{
			get
			{
				return this._Events.Entity;
			}
			set
			{
				Events previousValue = this._Events.Entity;
				if (((previousValue != value) 
							|| (this._Events.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Events.Entity = null;
						previousValue.EventsTimeSlotRelations.Remove(this);
					}
					this._Events.Entity = value;
					if ((value != null))
					{
						value.EventsTimeSlotRelations.Add(this);
						this._EventId = value.Id;
					}
					else
					{
						this._EventId = default(int);
					}
					this.SendPropertyChanged("Events");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TimeSlots_EventsTimeSlotRelations", Storage="_TimeSlots", ThisKey="TimeSlotId", OtherKey="Id", IsForeignKey=true)]
		public TimeSlots TimeSlots
		{
			get
			{
				return this._TimeSlots.Entity;
			}
			set
			{
				TimeSlots previousValue = this._TimeSlots.Entity;
				if (((previousValue != value) 
							|| (this._TimeSlots.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TimeSlots.Entity = null;
						previousValue.EventsTimeSlotRelations.Remove(this);
					}
					this._TimeSlots.Entity = value;
					if ((value != null))
					{
						value.EventsTimeSlotRelations.Add(this);
						this._TimeSlotId = value.Id;
					}
					else
					{
						this._TimeSlotId = default(int);
					}
					this.SendPropertyChanged("TimeSlots");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class TimeSlots : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _Start;
		
		private System.DateTime _End;
		
		private EntitySet<EventsTimeSlotRelations> _EventsTimeSlotRelations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStartChanging(System.DateTime value);
    partial void OnStartChanged();
    partial void OnEndChanging(System.DateTime value);
    partial void OnEndChanged();
    #endregion
		
		public TimeSlots()
		{
			this._EventsTimeSlotRelations = new EntitySet<EventsTimeSlotRelations>(new Action<EventsTimeSlotRelations>(this.attach_EventsTimeSlotRelations), new Action<EventsTimeSlotRelations>(this.detach_EventsTimeSlotRelations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id", Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="start", Storage="_Start", DbType="DateTime NOT NULL")]
		public System.DateTime Start
		{
			get
			{
				return this._Start;
			}
			set
			{
				if ((this._Start != value))
				{
					this.OnStartChanging(value);
					this.SendPropertyChanging();
					this._Start = value;
					this.SendPropertyChanged("Start");
					this.OnStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="end", Storage="_End", DbType="DateTime NOT NULL")]
		public System.DateTime End
		{
			get
			{
				return this._End;
			}
			set
			{
				if ((this._End != value))
				{
					this.OnEndChanging(value);
					this.SendPropertyChanging();
					this._End = value;
					this.SendPropertyChanged("End");
					this.OnEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TimeSlots_EventsTimeSlotRelations", Storage="_EventsTimeSlotRelations", ThisKey="Id", OtherKey="TimeSlotId")]
		public EntitySet<EventsTimeSlotRelations> EventsTimeSlotRelations
		{
			get
			{
				return this._EventsTimeSlotRelations;
			}
			set
			{
				this._EventsTimeSlotRelations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EventsTimeSlotRelations(EventsTimeSlotRelations entity)
		{
			this.SendPropertyChanging();
			entity.TimeSlots = this;
		}
		
		private void detach_EventsTimeSlotRelations(EventsTimeSlotRelations entity)
		{
			this.SendPropertyChanging();
			entity.TimeSlots = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Login;
		
		private string _Password;
		
		private EntitySet<Events> _Events;
		
		private EntitySet<Events> _InviteeID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Users()
		{
			this._Events = new EntitySet<Events>(new Action<Events>(this.attach_Events), new Action<Events>(this.detach_Events));
			this._InviteeID = new EntitySet<Events>(new Action<Events>(this.attach_InviteeID), new Action<Events>(this.detach_InviteeID));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="name", Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="login", Storage="_Login", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="password", Storage="_Password", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Events", Storage="_Events", ThisKey="Id", OtherKey="CreatorId")]
		public EntitySet<Events> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Events1", Storage="_InviteeID", ThisKey="Id", OtherKey="Invitee")]
		public EntitySet<Events> InviteeID
		{
			get
			{
				return this._InviteeID;
			}
			set
			{
				this._InviteeID.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events(Events entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Events(Events entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_InviteeID(Events entity)
		{
			this.SendPropertyChanging();
			entity.InviteeUsers = this;
		}
		
		private void detach_InviteeID(Events entity)
		{
			this.SendPropertyChanging();
			entity.InviteeUsers = null;
		}
	}
}
#pragma warning restore 1591
